function(input, output) {
# display 10 rows initially
output$ex1 <- DT::renderDataTable(
DT::datatable(iris, options = list(pageLength = 25))
)
# -1 means no pagination; the 2nd element contains menu labels
output$ex2 <- DT::renderDataTable(
DT::datatable(
iris, options = list(
lengthMenu = list(c(5, 15, -1), c('5', '15', 'All')),
pageLength = 15
)
)
)
# you can also use paging = FALSE to disable pagination
output$ex3 <- DT::renderDataTable(
DT::datatable(iris, options = list(paging = FALSE))
)
# turn off filtering (no searching boxes)
output$ex4 <- DT::renderDataTable(
DT::datatable(iris, options = list(searching = FALSE))
)
# write literal JS code in JS()
output$ex5 <- DT::renderDataTable(DT::datatable(
iris,
options = list(rowCallback = DT::JS(
'function(row, data) {
// Bold cells for those >= 5 in the first column
if (parseFloat(data[1]) >= 5.0)
$("td:eq(1)", row).css("font-weight", "bold");
}'
))
))
}
navbarPage(
title = 'DataTable Options',
tabPanel('Display length',     DT::dataTableOutput('ex1')),
tabPanel('Length menu',        DT::dataTableOutput('ex2')),
tabPanel('No pagination',      DT::dataTableOutput('ex3')),
tabPanel('No filtering',       DT::dataTableOutput('ex4')),
tabPanel('Function callback',  DT::dataTableOutput('ex5'))
)
library(shiny)
ui <- navbarPage(
title = 'DataTable Options',
tabPanel('Display length',     DT::dataTableOutput('ex1')),
tabPanel('Length menu',        DT::dataTableOutput('ex2')),
tabPanel('No pagination',      DT::dataTableOutput('ex3')),
tabPanel('No filtering',       DT::dataTableOutput('ex4')),
tabPanel('Function callback',  DT::dataTableOutput('ex5'))
)
server <- function(input, output) {
# display 10 rows initially
output$ex1 <- DT::renderDataTable(
DT::datatable(iris, options = list(pageLength = 25))
)
# -1 means no pagination; the 2nd element contains menu labels
output$ex2 <- DT::renderDataTable(
DT::datatable(
iris, options = list(
lengthMenu = list(c(5, 15, -1), c('5', '15', 'All')),
pageLength = 15
)
)
)
# you can also use paging = FALSE to disable pagination
output$ex3 <- DT::renderDataTable(
DT::datatable(iris, options = list(paging = FALSE))
)
# turn off filtering (no searching boxes)
output$ex4 <- DT::renderDataTable(
DT::datatable(iris, options = list(searching = FALSE))
)
# write literal JS code in JS()
output$ex5 <- DT::renderDataTable(DT::datatable(
iris,
options = list(rowCallback = DT::JS(
'function(row, data) {
// Bold cells for those >= 5 in the first column
if (parseFloat(data[1]) >= 5.0)
$("td:eq(1)", row).css("font-weight", "bold");
}'
))
))
}
shinyApp(ui = ui, server = server)
library(shiny)
library(ggplot2)  # for the diamonds dataset
ui <- fluidPage(
title = "Examples of DataTables",
sidebarLayout(
sidebarPanel(
conditionalPanel(
'input.dataset === "diamonds"',
checkboxGroupInput("show_vars", "Columns in diamonds to show:",
names(diamonds), selected = names(diamonds))
),
conditionalPanel(
'input.dataset === "mtcars"',
helpText("Click the column header to sort a column.")
),
conditionalPanel(
'input.dataset === "iris"',
helpText("Display 5 records by default.")
)
),
mainPanel(
tabsetPanel(
id = 'dataset',
tabPanel("diamonds", DT::dataTableOutput("mytable1")),
tabPanel("mtcars", DT::dataTableOutput("mytable2")),
tabPanel("iris", DT::dataTableOutput("mytable3"))
)
)
)
)
server <- function(input, output) {
# choose columns to display
diamonds2 = diamonds[sample(nrow(diamonds), 1000), ]
output$mytable1 <- DT::renderDataTable({
DT::datatable(diamonds2[, input$show_vars, drop = FALSE])
})
# sorted columns are colored now because CSS are attached to them
output$mytable2 <- DT::renderDataTable({
DT::datatable(mtcars, options = list(orderClasses = TRUE))
})
# customize the length drop-down menu; display 5 rows per page by default
output$mytable3 <- DT::renderDataTable({
DT::datatable(iris, options = list(lengthMenu = c(5, 30, 50), pageLength = 5))
})
}
shinyApp(ui, server)
